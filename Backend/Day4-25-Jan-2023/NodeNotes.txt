What is Node.js?

Node.js is an open-source server side runtime environment built on Chrome's V8 JavaScript engine.
It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.
Node.js applications are written in JavaScript and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux.
Node.js also provides a rich library of various JavaScript modules which simplifies the development of web applications using Node.js to a great extent.

Node.js = Runtime Environment + JavaScript Library

Node.js is a server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js was developed by Ryan Dahl in 2009 and its latest version is v0.10.36. The definition of Node.js as supplied by its official documentation is as follows − Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.

 Why Node.js?
 Following are the areas where Node.js is proving itself as a perfect technology partner. It is based on JavaScript − As we know JavaScript is a lightweight, interpreted, object-oriented language with first-class functions, and is best known as the scripting language for Web pages, but it's used in many non-browser environments as well. Node.js interprets JavaScript using Google's V8 JavaScript engine, which can run the JavaScript code on the server side. Node.js uses JavaScript on the server and also on the client.

 Asynchronous and Event Driven − All APIs of Node.js library are asynchronous, that is, non-blocking. It essentially means a Node.js based server never waits for an API to return data. The server moves to the next API after calling it and a notification mechanism of Events of Node.js helps the server to get a response from the previous API call. Let us understand this with the help of an example.

// NPM is a package manager for Node.js packages or modules
// NPM makes it easy for JavaScript developers to share and reuse code
// NPM consists of a command line client that interacts with a remote registry
// It allows users to consume and distribute JavaScript modules that are available in the registry
// The NPM program is installed on your computer when you install Node.js
// NPM is already ready to run on your computer!
// A package in Node.js contains all the files you need for a module
// Modules are JavaScript libraries you can include in your project
// Download a package, you get all the files you need to use it
// Modules are stored in a folder called node_modules
// NPM maintains a registry of free JavaScript modules
// To install a package, use the npm install command followed by the name of the package
// This installs the package in the current directory under node_modules and executables under node_modules/.bin
// To install a specific version of a package, use the npm install command followed by the name of the package and the version number
// To install a package globally, use the npm install command followed by the name of the package, the -g option, and the version number
// This installs the package in the C:\Users\Your Name\AppData\Roaming\npm\node_modules directory
// Global packages are installed only in Windows
// To uninstall a package, use the npm uninstall command followed by the name of the package
// To list all the packages installed on your computer, use the npm list command
// To find the installed version of an npm package, use the npm list command followed by the package name
// To update a package, use the npm update command followed by the package name
// To update global packages, use the npm update command followed by the package name and the -g option
// To update all the packages in the current directory, use the npm update command without any arguments
// To update global packages, use the npm update command followed by the -g option
// To find outdated packages, use the npm outdated command
// To update all the packages to the latest version, use the npm update command followed by the -g option
// To update all the packages to the latest version, use the npm update command followed by the -g option
// To update all the packages to the latest version, use the npm update command followed by the -g option
// To update all the packages to the latest version, use the npm update command followed by the -g option
// To update all the packages to the latest version, use the npm update command followed by the -g option
// To update all the packages to the latest version, use the npm update command followed by the -g option
